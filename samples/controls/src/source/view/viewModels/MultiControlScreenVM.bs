import "pkg:/source/maestro/view/viewModel/BaseViewModel.bs"

namespace MCSVM
class MultiControlScreenVM extends BaseViewModel

'outgoing
public focusId = "toggleButton"
public index = 0
public content = invalid
public rowHeights = []
public focusXOffset = []
public rowItemSize = []
public alternateChildren = invalid
public childrenText = "inline children"
public buttonText = "animated: on"
public isAnimated = true
public needsRecalulating = false

'Incoming
public numContainerChildren = 0

private isUsingGroup1 = false

public function new()
  m.super("MultiControlScreenVM")
  m.setField("content", m.makeContent([
    m.makeRow("ZPowerCell", 10, [300, 200], 100, false)
    ' m.makeRow("ZHeader", 1, [1920, 600], - 10, false)
    m.makeRow("ZPowerCell", 20, [300, 200], 100, true)
    m.makeRow("ZPowerCell", 30, [600, 500], 100, true)
    m.makeRow("ZPowerCell", 20, [450, 600], 100, true)
    ' m.makeRow("ZHeader", 1, [1920, 600], - 10, false)
    m.makeRow("ZPowerCell", 10, [650, 300], 100, true)
    m.makeRow("ZPowerCell", 10, [300, 300], 100, true)
    m.makeRow("ZPowerCell", 10, [300, 300], 100, true)
    m.makeRow("ZPowerCell", 10, [300, 300], 100, true)
  ]))
  m.setField("needsRecalulating", true)
end function

private function makeContent(rows)
  i = 0
  rowItemSize = []
  rowHeights = []
  focusXOffsets = []
  content = createObject("roSGNode", "ContentNode")
  content.appendChildren(rows)
  
  for each row in rows
    rowItemSize.push(row.size)
    rowHeights.push(row.size[1])
    focusXOffsets.push(row.focusXOffset)
  end for
  
  m.setField("rowItemSize", rowItemSize)
  m.setField("rowHeights", rowHeights)
  m.setField("focusXOffset", focusXOffset)
  return content
end function

private function makeRow(compName, count, size, focusXOffset, focusable)
  row = createObject("roSGNode", "ContentNode")
  row.addFields({ "size": size, "focusXOffset": focusXOffset, "isHeader": not focusable })
  ' row.focusable = focusable
  rowItems = []
  for i = 0 to count - 1
    rowItems.push(m.makeItem(compName))
  end for
  
  row.appendChildren(rowItems)
  
  return row
end function

function makeItem(compName)
  item = createObject("roSGNode", "ContentNode")
  
  item.addFields({ "compName": compName })
  return item
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Public api
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

public function onToggleIsAnimated(value)
  m.setField("isAnimated", not m.isAnimated)

  if m.isAnimated
    m.setField("buttonText", "animated: on")
  else
    m.setField("buttonText", "animated: off")
  end if
  
end function

public function onToggleGroup(value)
  m.logInfo("onToggleGroup", value)
  
  m.isUsingGroup1 = not m.isUsingGroup1
  
  if m.isUsingGroup1
    m.setField("alternateChildren", m.group1)
    m.setField("childrenText", "group 1")
    
  else
    m.setField("alternateChildren", m.group2)
    m.setField("childrenText", "group 2")
  end if
  
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Private impl
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Key Handling
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

public function onKeyPressUp()
  m.logInfo("onKeypressUp")
  
  if m.index > 0
    m.logInfo("moving index down - animated:", m.isAnimated)
    m.setField("index", m.index - 1)
    return true
  else 
    m.logInfo("focusing on toggle button")
    m.setField("focusId", "toggleButton")
    return true
  end if
  
  return true
end function

public function onKeyPressDown()
  m.logInfo("onKeypressDown")
  
  if m.focusId = "toggleButton" or m.focusId = "groupButton"
    m.setField("focusId", "parentContainer")
    return true
  else
    m.logInfo("moving index up - animated:", m.isAnimated)
    
    if m.index < m.numContainerChildren - 1
      m.setField("index", m.index + 1)
    end if
    
    m.logInfo("index is now", m.index)
    return true
  end if
  
end function

public function onKeyPressRight()
  m.logInfo("onKeypressLeft")
  
  if m.focusId = "toggleButton"
    m.setField("focusId", "groupButton")
    return true
  end if
end function

public function onKeyPressLeft()
  m.logInfo("onKeypressRight")
  
  if m.focusId = "groupButton"
    m.setField("focusId", "toggleButton")
    return true
  end if
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Lifecycle methods
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

end class
end namespace