'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Initialization
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function Init()
  registerLogger("AppController")
  'get nav items from our tab controller
  findNodes(["tabMenu", "tabController"])
  findNodes(["TodoScreen", "GridScreen", "OptionsScreen"])
  m.tabController.callFunc("initialize", {})
  
  m.tabMenu.observeField("currentItem", "onTabMenuCurrentItemChange") 
  m.deeplinkingScreen = createObject("roSGNode", "DeepLinkingScreen")
  m.deeplinkingNavItem = createNavItem(m.deeplinkingScreen, "deepLinking")
  m.tabController.callFunc("addExistingView", m.deeplinkingScreen)
  
  items = createMenuItems()
  m.isHomeLoaded = false
  m.tabMenu.callFunc("setItems", items)
end function

function _initialize(args = invalid)
  logInfo("_initialize")
  
  if isDeeplinkingRequired(m.modelLocator.appArgs)
    logInfo("deep linking is required")
    processDeeplinkingArgs(m.modelLocator.appArgs)
  else
    logInfo("Going straigh to home - no deep linking")
    navigateToHomeItem()
  end if
end function

function createMenuItems()
  items = []
  m.homeItem = createNavItem(m.TodoScreen, "TODO")
  items.push(m.homeItem)
  items.push(createNavItem(m.GridScreen, "GRID"))
  items.push(createNavItem(m.OptionsScreen, "OPTIONS"))
  return items
end function

function createNavItem(screen, name, isOptionsMenu = false)
  navItem = createObject("roSGNode", "NavItem")
  navItem.id = screen.id
  navItem.name = name
  navItem.isOptionsItem = true
  return navItem
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Nav Menu Management
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function onTabMenuCurrentItemChange(event)
  logInfo("tab menu item changed", m.tabMenu.currentItem)
  m.tabController.callFunc("changeCurrentItem", m.tabMenu.currentItem)
end function

function onOptionsMenuIsFocusedChange(event)
  logInfo("optionsMenu isFocused changed", m.optionsMenu.isFocused)
end function

function onIsFocusedOnContentChange(event)
  logInfo("onIsFocusedOnContentChange {0}", m.top.isFocusedOnContent)
  if m.top.isFocusedOnContent
    setFocus(m.tabController)
  else
    setFocus(m.tabMenu)
  end if
end function

function navigateToHomeItem()
  m.tabMenu.currentItem = m.homeItem
  m.isHomeLoaded = true
end function

function getTopScreen()
  logInfo("getTopScreen", menuItem)
  topScreen = invalid
  
  if m.videoPlayer 
    return m.videoPlayer
  else
    
    if menuItem = invalid
      if m.isInDeeplinkMode
        menuItem = m.deeplinkingNavItem
      else
        menuItem = m.topMenuBar.currentItem
      end if
    end if
    
    if menuItem <> invalid
      
      topScreen = m.tabController.callFunc("getViewForMenuItemContent", menuItem)
      
      if topScreen <> invalid
        topScreen = topScreen.callFunc("getTopScreen", invalid)
      end if
    end if
    
  end if
  return topScreen
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Deep Linking
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function isDeeplinkingRequired(args)
  return args <> invalid and args.contentId <> invalid and args.contentId <> "" and args.mediaType <> invalid and args.mediaType <> ""
end function

function processDeeplinkingArgs(args)
  logMethod("processDeeplinkingArgs", args)
  ' here you would have a task that does the work for you, being run in a roku promise
  'rokuPromise on a task here
  'here we're just hard coding it to a fake rsult
  
  item = createObject("roSGNode", "ContentNode") 
  item.id = args.contentID
  item.title = "title " + args.contentID + " type " + args.mediaType
  
  collection = createObject("roSGNode", "ContentNode") 
  collection.id = "c_" + args.contentID
  selection = createObject("roSGNode", "Selection") 
  selection.currentItem = item
  selection.collection = collection
  
  if args.mediaType = "vod" or args.mediaType = "episode"
    action = "play"
  else
    action = "grid"
  end if
  
  deeplinkingData = {
    "isValid": true
    "selection": selection
    "mediaType": args.mediaType
    "action": action
  }
  onDeeplinkingTaskResult(deeplinkingData)
end function

function onDeeplinkingTaskResult(deepLinkingData)
  logMethod("onDeeplinkingTaskResult deeplinkingData", deepLinkingData)
  
  m.modelLocator.deeplinkingData = deepLinkingData
  
  if m.modelLocator.deeplinkingData.isValid
    enterDeeplinking()
  else
    
    if not m.isHomeLoaded
      logInfo("App must've done deep linking from lauch, loading home now")
      navigateToHomeItem()
    end if
  end if
end function

function enterDeeplinking()
  logMethod("enterDeeplinking")
  m.isInDeeplinkMode = true
  m.preDeeplinkingItem = m.tabController.currentItem
  m.tabController.callFunc("changeCurrentItem", m.deeplinkingNavItem)
  m.tabMenu.visible = false
  setFocus(m.tabController)
end function

function exitFromDeeplinking(args = invalid)
  logMethod("exitFromDeeplinking")
  m.isInDeeplinkMode = false
  m.tabMenu.visible = true
  
  if m.preDeeplinkingItem <> invalid
    m.tabController.callFunc("changeCurrentItem", m.preDeeplinkingItem)
  else
    navigateToHomeItem()
  end if
  setFocus(m.tabMenu)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ App Services
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'these are functions that the AppController provides to the app
'via mixin/notification mechanism

function playSelection(selection)
  logInfo("playSelection")
  'this is a simple example - in my apps, the videoplayer is usually
  'long lived, and is an xml element in this view (i.e. AppController)
  m.videoPlayer = createObject("roSGNode", "VideoPlayer")
  m.videoPlayer.selection = selection
  toggleVideoPlayerVisible(true)
end function

function toggleVideoPlayerVisible(isVisible)
  m.tabMenu.visible = not isVisible and not m.isInDeeplinkMode
  if isVisible
    m.tabController.currentView.navController.callFunc("push", m.videoPlayer)
    setFocus(m.tabController.currentView.navController)
  else
    m.tabController.currentView.navController.callFunc("pop", invalid)
    setFocus(m.tabController.currentView)
  end if
end function


'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Key Handling
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function _onKeyPressDown() as boolean
  if not m.top.isFocusedOnContent
    m.top.isFocusedOnContent = true
  end if
  return true
end function

function _onKeyPressUp() as boolean
  m.top.isFocusedOnContent = false
  return true
end function

function _onKeyPressOption() as boolean
  m.global.appController.isFocusedOnContent = false
  m.tabMenu.currentItem = m.OptionsScreen.navItem
  return true
end function

function _onKeyPressBack() as boolean
  if not m.top.isFocusedOnContent
    m.top.isFocusedOnContent = true
  end if
  return true
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Lifecycle
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function _onGainedFocus(isSelfFocused) as void
  onIsFocusedOnContentChange(invalid)
end function
