'@Only
'@TestSuite [MBVMT] BaseViewModel Tests
namespace MBVMT

'@BeforeEach
function BeforeEach()
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests simple constructor
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test invalid
'@Params[invalid]
'@Params[{}]
'@Params["wrong"]
'@Params[[]]
'@Params[{"prop":invalid}]
'@Params[{"name":""}]
function constructor_invalid(subClass)
  vm = BaseViewModel(subClass)
  m.assertEqual(vm.state, "invalid")
end function

'@Test valid
function constructor_valid()
  subClass = {
    name: "testVM"
  }
  vm = BaseViewModel(subClass)
  m.assertEqual(vm.state, "none")
  m.assertEqual(vm.name, "testVM")
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'@It tests vm class functions correctly, with scoped methods
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

'@Test valid
function testVM()
  vm = createVM()
  m.assertEqual(vm.state, "none")
  m.assertEqual(vm.name, "testVM")

  vm.initialize()
  m.assertEqual(vm.state, "initialized")

  vm.setAge(23)
  m.assertEqual(vm.getAge(), 23)
end function

'@Test calls abstract methods
function testVM_abstractMethods()
  vm = createVM()
  m.assertEqual(vm.state, "none")
  m.assertEqual(vm.name, "testVM")

  vm.initialize()
  m.assertEqual(vm.state, "initialized")
  m.assertTrue(vm.isInitCalled)

  vm.onShow()
  m.assertTrue(vm.isOnShowCalled)

  vm.onHide()
  m.assertTrue(vm.isOnHideCalled)

  vm.destroy()
  m.assertTrue(vm.isDestroyCalled)
end function

'@Test timeConstructor
function timeConstructor()
  vm = createVM()
end function

'@Test time method calls
function testVM_time()
  vm = createVM()
  vm.initialize()
  vm.onShow()
  vm.onHide()
  vm.destroy()
end function

function getAge()
  return m.age
end function

function setAge(age)
  return m.setField("age", age)
end function

function customInitialize()
  m.isInitCalled = true
end function

function customOnShow()
  m.isOnShowCalled = true
end function

function customOnHide()
  m.isOnHideCalled = true
end function

function customDestroy()
  m.isDestroyCalled = true
end function

function createVM()
  subClass = {
    name: "testVM"
    getAge: getAge
    setAge: setAge
    _initialize: customInitialize
    _destroy: customDestroy
    _onShow: customOnShow
    _onHide: customOnHide
  }
  return BaseViewModel(subClass)
end function

end namespace