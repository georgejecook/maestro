namespace MDM

function initDispatcher(modelLocator) as boolean
  if modelLocator <> invalid
    dispatcherNode = createObject("roSGNode", "Node")
    dispatcherNode.addField("message", "assocarray", true)
    modelLocator.messageDispatcher = dispatcherNode
    if modelLocator.messageDispatcher = invalid
      modelLocator.addFields({ "messageDispatcher": dispatcherNode })
    end if
    return modelLocator.messageDispatcher <> invalid
  else
    return false
  end if
end function

function isDispatcherReady()
  if m.modelLocator <> invalid and m.modelLocator.messageDispatcher <> invalid
    return true
  else
    logError("the event dispatcher is not ready. Have you created a modelLocator instance and called MDM.initDispatcher()?")
    return false
  end if
end function

function postMessage(name, data)
  if MDM.isDispatcherReady()
    m.modelLocator.messageDispatcher.message = {
      "name": name
      "data": data
    }
  end if
end function

function observeMessage(name, handler, vmName = invalid)
  if MDM.isDispatcherReady()
    
    if m._m_messageHandlers = invalid
      m._m_messageHandlers = {}
      m.modelLocator.messageDispatcher.observeField("message", MDM_onMessageChanged)
    end if
    
    m._m_messageHandlers[name] = { "handler": handler, "vmName": vmName }
  end if
end function


function unobserveMessage(name = invalid)
  if MDM.isDispatcherReady()
    
    if m._m_messageHandlers = invalid
      m._m_messageHandlers = {}
    end if
    
    if name <> invalid
      m._m_messageHandlers.delete(name)
    else
      m._m_messageHandlers = {}
    end if
    
    if m._m_messageHandlers.count() = 0
      m.modelLocator.messageDispatcher.unobserveField("message")
      m._m_messageHandlers = invalid
    end if
  end if
end function

function onMessageChanged(event)
  message = event.getData()
  
  if m._m_messageHandlers <> invalid
    handler = m._m_messageHandlers[message.name]
    if handler <> invalid
      handler = m._m_messageHandlers[message.name]
      
      if message.vmName <> invalid
        
        if MVVM.isVM(m[message.vmName])
          
          if MU.isFunction(m[message.vmName])
            m[message.vmName][message.handler](message.data)
          else
            logError("recieved message", message, "but no method on vm matches the handler")
          end if
          
        end if
      else
        if MU.isFunction(m[message.handler])
          message.hander(message.data)
        else
          logError("recieved message", message, "but no method in scope matches the handler")
        end if
        
      end if
    else
      logError("recieved message", message, "when no handler is registered")
    end if 
  else
    logError("recieved message", message, "when no handlers are registred in scope")
  end if
end function
end namespace