import "../../observable/BaseObservable.bs"
import "pkg:/source/rLog/rLogMixin.brs"

namespace MBVM

' /**
'  * @module BaseViewModel
'  * @description Base class for all ViewModels
'  */
class BaseViewModel extends BaseObservable

' /**
'  * @member new
'  * @memberof module:BaseViewModel
'  * @instance
'  * @function
'  * @description contsructor for a view model.
'  *              this class contains the common functions to assist in vm management
'  *               - KeyMixin integration points
'  *               - FocusMixin integration points
'  *               - wrappers for key navigation methods
'  * @param {string} name to use in logs, etc
'  */

public function new(name = "BaseViewModel")
  m.super()
  m.name = name
  registerLogger(name, true, m)
end function

public state = "none"
public focusId = invalid
public name = ""

private __viewModel = true

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ public API
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

public function initialize()
  m.logMethod("initialize")
  if MU.isFunction(m._initialize)
    m._initialize()
  end if
  m.state = "initialized"
end function

override public function destroy()
  m.super()
  m.state = "destroyed"
end function

public function onShow()
end function

public function onHide()
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ KEY HANDLING
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

public function onKeyEvent(key as string, press as boolean) as boolean
  result = false
  if press
    if MU.isFunction(m.isAnyKeyPressLocked) and m.isAnyKeyPressLocked()
      return true
    end if
    
    if key = "down" and MU.isFunction(m.onKeyPressDown)
      result = m.onKeyPressDown()
    else if key = "up" and MU.isFunction(m.onKeyPressUp)
      result = m.onKeyPressUp()
    else if key = "left" and MU.isFunction(m.onKeyPressLeft)
      result = m.onKeyPressLeft()
    else if key = "right" and MU.isFunction(m.onKeyPressRight)
      result = m.onKeyPressRight()
    else if key = "OK" and MU.isFunction(m.onKeyPressOK)
      result = m.onKeyPressOK()
    else if key = "back" and MU.isFunction(m.onKeyPressBack)
      result = m.onKeyPressBack()
    else if key = "options" and MU.isFunction(m.onKeyPressOption)
      result = m.onKeyPressOption()
    else if key = "play" and MU.isFunction(m.onKeyPressPlay)
      result = m.onKeyPressPlay()
    end if
  else
    result = false
  end if
  
  if (result = invalid)
    result = false
  end if
  
  if result = false and MU.isFunction(m.isCapturingAnyKeyPress)
    result = m.isCapturingAnyKeyPress(key, press)
  end if
  
  return result
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ nav support
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'Note the following methods are proxies to facilitate testing.
'All of them will call out to the top level scope

' /**
'  * @member push
'  * @memberof module:BaseViewModel
'  * @instance
'  * @function
'  * @description wrapper for push
'  * @param {view} the view to push, if this is a string, then it is looked up on m - so you can push views by their id, as well as actual views
'  */
public function push(view)
  
  if MU.isString(view)
    view = MVMM.findViewWithId(view)
  end if
  
  push(view)
end function

public function pop() as object
  return(pop())
end function

public function getViewById(id)
  view = MVMM.findViewWithId(id)
  
  if view = invalid
    m.logError("could not find view with name ", id)
  end if
  
  return view
end function

public function resetNavControllerToRoot()
  resetNavControllerToRoot()
end function

public function resetNavController(newFirstScreen = invalid, endIndex = -1)
  resetNavController(newFirstScreen, endIndex)
end function

end class
end namespace
