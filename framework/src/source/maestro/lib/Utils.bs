' /**
'  * @module MaestroUtils
'  * @description General maestro util methods
'  */
namespace MU

function isUndefined(value)
  return type(value) = "<uninitialized>"
end function

function isArray(value)
  return type(value) <> "<uninitialized>" and value <> invalid and GetInterface(value, "ifArray") <> invalid
end function

function isAACompatible(value)
  return type(value) <> "<uninitialized>" and value <> invalid and GetInterface(value, "ifAssociativeArray") <> invalid
end function

function isString(value)
  return type(value) <> "<uninitialized>" and GetInterface(value, "ifString") <> invalid
end function

function isBoolean(value)
  return type(value) <> "<uninitialized>" and GetInterface(value, "ifBoolean") <> invalid
end function

function isFunction(value)
  return type(value) = "Function" or type(value) = "roFunction"
end function

function isInteger(value)
  return type(value) <> "<uninitialized>" and GetInterface(value, "ifInt") <> invalid and (Type(value) = "roInt" or Type(value) = "roInteger" or Type(value) = "Integer")
end function

function dv(view)
  if type(view) = "roSGNode"
    return view.subtype() + "." + view.id
  else
    return "#INVALID#"
  end if
end function

' /**
'  * @member callAAFunc
'  * @memberof module:Utils
'  * @instance
'  * @function
'  * @description allows for easy calling of a method with variargs, on an aa
'  * @param {class} target
'  * @param {funcName} name of func to call
'  * @param {Any} p1 param 1, can leave blank to skip
'  * @param {Any} p2 param 2, can leave blank to skip 
'  * @param {Any} p3 param 3, can leave blank to skip
'  * @returns {any} whatever the func returns, or invald if not found
'  */
function callAAFunc(target, funcName, p1 = "#M_NONE#", p2 = "#M_NONE#", p3 = "#M_NONE#")
  
  if target <> invalid
    if MU.isFunction(target[funcName])
      if not MU.isString(p3) or p3 <> "#M_NONE#"
        return target[funcName](p1, p2, p3)
      else if not MU.isString(p2) or p2 <> "#M_NONE#"
        return target[funcName](p1, p2)
      else if not MU.isString(p1) or p1 <> "#M_NONE#"
        return target[funcName](p1)
      else
        return target[funcName]()
      end if
    else
      logError("target did not have function named", funcName)
    end if
  else
    logError("tried to call AAFunc; with empty target")
  end if
  
  return invalid
end function

function apply(func, args = [], target = invalid)
  if not MU.isArray(args)
    logError("apply expects an array of args")
    return invalid
  end if
  
  count = args.count()
  if count > 4
    logError("apply only supports up to 4 params")
    return invalid
  end if
  
  if target <> invalid
    if not MU.isFunction(target[func])
      logError("target did not have function ", func)
      return invalid
    end if
    
    if count = 0
      return target[func]()
    else if count = 1
      return target[func](args[0])
    else if count = 2
      return target[func](args[0], args[1])
    else if count = 3
      return target[func](args[0], args[1], args[2])
    else if count = 4
      return target[func](args[0], args[1], args[2], args[3])
    end if
  else
    if not MU.isFunction(func)
      logError("tried to apply to out of scope function")
      return invalid
    end if
    
    if count = 0
      return func()
    else if count = 1
      return func(args[0])
    else if count = 2
      return func(args[0], args[1])
    else if count = 3
      return func(args[0], args[1], args[2])
    else if count = 4
      return func(args[0], args[1], args[2], args[3])
    end if
  end if
end function

function removeDuplicateKeys(aa = invalid, otherAA = invalid)
  if otherAA <> invalid and aa <> invalid
    
    for each key in otherAA
      if aa.doesExist(key) and formatJson(aa[key]) = formatJson(otherAA[key])
        aa.delete(key)
      end if
    end for
    
  end if
  
  return aa
end function

' /**
'  * @member getcontentField
'  * @memberof module:MaestroUtils
'  * @instance
'  * @function
'  * @description get's content field from array. '  * @param {assocarray} content - node/aa to look up on
'  * @param {string} field - path to field, with "items.path.syntax",
'  * @returns {any} value if foud, or default value
'  */
function getContentField(content, field, default = invalid) 
  part = content
  if field <> invalid
    
    parts = field.split(".")
    numParts = parts.count()
    i = 0
    
    while i < numParts and part <> invalid
      part = part[parts[i]]
      i++ 
    end while
  end if
  
  if part <> invalid
    return part
  else 
    return default
  end if
end function

' /**
'  * @member getContentFieldPlus
'  * @memberof module:MaestroUtils
'  * @instance
'  * @function
'  * @description get's content field from array. This variation has a slower implementation that supports array lookup
'  * @param {assocarray} content - node/aa to look up on
'  * @param {string} field - path to field, with "items.2.path.syntax",
'  * @returns {any} value if foud, or default value
'  */
function getContentFieldPlus(content, field, default = invalid) 
  part = content
  if field <> invalid
    
    parts = field.split(".")
    numParts = parts.count()
    i = 0
    
    while i < numParts and part <> invalid
      if parts[i] = "0" or parts[i].toInt() <> 0
        if MU.isArray(part)
          part = part[parts[i].toInt()]
        else
          part = invalid
        end if
      else
        part = part[parts[i]]
      end if
      i++ 
    end while
  end if
  
  if part <> invalid
    return part
  else 
    return default
  end if
end function


function setOrAddNodeField(node, field, value = invalid)
  if node.doesExist(field)
    node[field] = value
  else
    info = {}
    info[field] = value
    node.addFields(info)
  end if
end function

private function getChildAtDepth(node, depth)
  currentDepth = 0
  
  while node <> invalid and currentDepth < depth
    node = node.getChild(0)
    currentDepth++
  end while
  
  return node
end function

end namespace
