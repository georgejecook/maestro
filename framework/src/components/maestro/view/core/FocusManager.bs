import "pkg:/source/rLog/rLogMixin.brs"
import "pkg:/source/maestro/lib/Utils.bs"

' /**
'  * @module FocusManager
'  * @description Source of truth about application focus
'  */

function init() as void
  registerLogger("FocusManager")
  m.top.observeField("_debugM", "onDebugMChange")
  m.focusTimer = m.top.findNode("focusTimer")
  m.wasShown = false
  m.isKeyPressLocked = false
  m.lockedNode = invalid
end function

function onDebugMChange()
  logInfo("dumping m for debugging purposes")
  m.top._m = m
end function


'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ public api
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function setFocusOn(node, isForced = false) as void
  ' logMethod("setFocusOn", node)
  
  if m.top.isLocked
    if isForced
      logWarn("overriding setting locked focus (locked reason:", m.top.lockReason, ")")
    else
      logWarn("cannot set focus, it is locked - reason :", m.top.lockReason)
      return 
    end if
  end if
  
  if isValid(node)
    parents = getParents(node)
    
    if isInScene(parents)
      
      if m.top.isLogging
        logInfo("setting focus to ", node.subType(), ".", node.id)
      end if
      
      _setFocusOn(node, parents)
    else
      logError("set focus to an off scene node! - in future this will set the focus to a backup-context node, to stop illegal focus scenarios")
      _setFocusOn(node, parents)
    end if
  end if
  
end function

function unsetFocusOn(node)
  logInfo("manualy unsetting focus on node")
  node.setFocus(false)
end function

function setFocusLocked(node, reason = "")
  
  if node <> invalid
    setFocusOn(node, true)
    m.lockedNode = node
    logInfo("locking focus due to reason", reason)
    m.focusTimer.control = "start"
  else
    logInfo("unlocking focus - previous lock reason:", m.top.lockReason)
    m.focusTimer.control = "stop"
    m.lockedNode = invalid
  end if
  
  m.top.lockReason = reason
  m.top.isLocked = m.lockedNode <> invalid
end function

function onFocusTimerFire()
  ' logInfo("onFocusTimerFire")
  if m.focusedNode <> invalid
    m.focusedNode.setFocus(true)
  end if
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ private impl
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function _setFocusOn(node, parents) as void
  
  currentNode = m.top.focusedNode
  isCurrentNode = false
  if (node = invalid and currentNode = invalid) or (node <> invalid and node.isSamenode(currentNode))
    if node <> invalid
      if node.doesExist("isFocused")
        node.isFocused = true
      end if
      if not node.isInFocusChain()
        isCurrentNode = true
      end if
    end if

    'FIXME - not sure why I put this line here!
    ' if not isCurrentNode
    '   return
    ' end if
  end if
  
  if currentNode <> invalid and not isCurrentNode
    ' logInfo("setting focus on new node - unsetting focus on", currentNode.id) 
    if currentNode.doesExist("isFocused") and currentNode.isFocused = true
      currentNode.isFocused = false
    end if
    
    setFieldOnNodes(m.parents, "isChildFocused", false)
  end if
  
  m.top.focusedNode = node
  m.parents = parents
  
  if node <> invalid
    if node.doesExist("drawFocusFeedback")
      previousDrawFocusFeedback = node.drawFocusFeedback
      node.drawFocusFeedback = false
    end if
    
    node.setFocus(true)
    
    if node.doesExist("drawFocusFeedback")
      node.drawFocusFeedback = previousDrawFocusFeedback
    end if
    
    if node.doesExist("isFocused")
      ' logInfo("setting node as focused, and telling parents", node.id)
      node.isFocused = true
    end if
    setFieldOnNodes(parents, "isChildFocused", true)
  else
    logError("set focus to invalid node! - in future this will set the focus to a backup-context node, to stop illegal focus scenarios")
  end if
end function

function getParents(node)
  parent = node.getParent()
  parents = []
  while (parent <> invalid)
    
    if parent.subType() = "ModelLocator"
      logWarn("trying to focus on a view that is not yet on the view hierarchy")
      return []
    end if
    parents.push(parent)
    parent = parent.getParent()
  end while
  
  return parents
end function

function isValid(node)
  
  if MU.isUndefined(node)
    logError("asked to focus on undefined node")
    return false
  else if node = invalid
    logError("asked to focus on invalid node")
    return false
  else if type(node) <> "roSGNode"
    logError("asked to focus on non rsgnode")
    return false
  end if
  
  return true
end function 

function isInScene(parents)
  
  if parents.count() = 0
    logError("asked to focus on node with no parents")
    return false
  end if
  
  lastParent = parents[parents.count() - 1]
  
  if not lastParent.isSubType("Scene")
    logError("node is not in the scene")
    return false
  end if
  
  return true
end function

function setFieldOnNodes(nodes, field, value)
  ' logInfo("--------------------------------START") 
  for i = 0 to nodes.count() - 1
    node = nodes[i]
    ' logInfo(i, "id", node.id)
    if node.doesExist(field) and node[field] <> value
      ' logInfo(field, "node[field]", node[field], value)
      node[field] = value
    end if
    
  end for
  ' logInfo("--------------------------------END") 
  
end function
