import "pkg:/source/rLog/rLogMixin.bs"
import "pkg:/source/maestro/lib/Utils.bs"

' /**
'  * @module FocusManager
'  * @description Source of truth about application focus
'  */

function init() as void
  registerLogger("FocusManager")
  m.top.observeField("_debugM", "onDebugMChange")
  m.top.observeField("_debugM", "onDebugMChange")
  
  m.wasShown = false
  m.isKeyPressLocked = false
end function

function onDebugMChange()
  logInfo("dumping m for debugging purposes")
  m.top._m = m
end function


'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ public api
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function setFocusOn(node, isForced = false) as void
  if m.top.isLocked
    if isForced
      logWarn("overriding setting locked focus (locked reason:", m.top.lockReason, ")")
    else
      logWarn("cannot set focus, it is locked - reason :", m.top.lockReason)
      return 
    end if
  end if
  
  if isValid(node)
    parents = getParents(node)
    
    if isInScene(parents)
      
      if m.top.isLogging
        logInfo("setting focus to ", node.subType(), ".", node.id)
      end if
      
      _setFocusOn(node, parents)
    else
      logError("set focus to an off scene node! - in future this will set the focus to a backup-context node, to stop illegal focus scenarios")
    end if
  end if
  
end function

function unsetFocusOn(node)
  logInfo("manualy unsetting focus on node")
  node.setFocus(false)
end function

function setFocusLocked(isLocked, reason = "")
  
  if isLocked
    logInfo("locking focus due to reason", reason)
  else
    logInfo("unlocking focus - previous lock reason:", m.top.lockReason)
  end if
  
  m.top.lockReason = reason
  m.top.isLocked = isLocked
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ private impl
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function _setFocusOn(node, parents) as void
  currentNode = m.top.focusedNode
  
  if currentNode <> invalid
    
    if currentNode.doesExist("isFocused")
      currentNode.isFocused = false
    end if
    
    setFieldOnNodes(m.parents, "isChildFocused", false)
  end if
  
  m.top.focusedNode = node
  m.parents = parents
  
  if node <> invalid
    
    node.setFocus(true)
    
    if node.doesExist("isFocused")
      node.isFocused = true
    end if
    
    setFieldOnNodes(parents, "isChildFocused", true)
  else
    logError("set focus to invalid node! - in future this will set the focus to a backup-context node, to stop illegal focus scenarios")
  end if
end function

function getParents(node)
  parent = node.getParent()
  parents = []
  
  while (parent <> invalid)
    parents.push(parent)
    parent = parent.getParent()
  end while
  
  return parents
end function

function isValid(node)
  
  if MU.isUndefined(node)
    logError("asked to focus on undefined node")
    return false
  else if node = invalid
    logError("asked to focus on invalid node")
    return false
  else if type(node) <> "roSGNode"
    logError("asked to focus on non rsgnode")
    return false
  end if
  
  return true
end function 

function isInScene(parents)
  
  if parents.count() = 0
    logError("asked to focus on node with no parents")
    return false
  end if
  
  lastParent = parents[parents.count() - 1]
  
  if not lastParent.isSubType("Scene")
    logError("node is not in the scene")
    return false
  end if
  
  return true
end function

function setFieldOnNodes(nodes, field, value)
  
  for i = 0 to nodes.count() - 2 'don't notify the scene
    node = nodes[i]
    
    if node.doesExist(field)
      node[field] = value
    end if
    
  end for
  
end function
