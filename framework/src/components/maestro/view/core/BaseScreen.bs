import "pkg:/source/maestro/view/viewModel/ViewModelMixin.bs"

' /**
'  * @module BaseScreen
'  * @description Base view for all screens.
'     provides common functions, which all screens require
'  */

function Init()
  'get a reference to your model locator/central message bus/DIP here.
  ' m.modelLocator = m.global.modelLocator
  
  'Track whatever constitutes a reload here, so any visible views can get reloaded
  ' m.modelLocator.user.observeField("isLoggedIn", "onUserChange")
end function

function onUserChange()
  if m.top.isShown
    m.top.isUserChangePending = false
    _onUserChange()
  else
    logInfo("user is change; but screen is not showing - marked as pending")
    m.top.isUserChangePending = true
  end if
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Overridden methods
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function _baseScreenOnShow()
  logMethod("_baseScreenOnShow")
  if m.top.isUserChangePending
    logInfo("a user change was pending, and the screen is now shown")
    m.top.isUserChangePending = false
    _onUserChange()
  end if

  if MVVM.isVM(m.vm)
    m.vm.onShow()
  end if
end function

function _baseScreenOnHide()
  if MVVM.isVM(m.vm)
    m.vm.onHide()
  end if
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ abstract methods
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function _onUserChange()
  'override me
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ nav support
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

function push(view)
  navController = getNavController()
  
  if (navController <> invalid)
    navController.callFunc("push", view)
  else
    logError("Push failed - there is no navcontroller on ", m.top)
  end if
end function

function pop() as object
  navController = getNavController()
  
  if (navController <> invalid)
    return navController.callFunc("pop", invalid)
  else
    logError("Pop failed - there is no navcontroller on ", m.top)
  end if
end function

function resetNavControllerToRoot()
  logMethod("resetNavControllerToRoot." + m.top.id)
  resetNavController(invalid, 0)
end function

function resetNavController(newFirstScreen = invalid, endIndex = -1)
  logMethod("resetNavController." + m.top.id)
  navController = getNavController()
  
  if (navController <> invalid)
    navController.callFunc("reset", newFirstScreen, endIndex)
  else
    logError("Pop failed - there is no navcontroller on ", m.top)
  end if
end function

function getNavController()
  return m.top.navController
end function

function onAddedToAggregateView(navController)
  logMethod("onAddedToAggregateView", m.top.id)
  _onAddedToAggregateView(navController)
end function

function onRemovedFromAggregateView(navController)
  logMethod("onRemovedFromAggregateView", m.top.id)
  _onRemovedFromAggregateView(navController)
end function

function _onAddedToAggregateView(navController)
end function

function _onRemovedFromAggregateView(navController)
end function

'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
'++ Screen helpers
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

' /**
'  * @member getTopScreen
'  * @memberof module:BaseScreen
'  * @instance
'  * @description gets the screen at the top of this screen's sceneGraph.
'  * @returns {BaseScreen} a screen considered as the top of this graph
'  */
function getTopScreen(args = invalid)
  logMethod("getTopScreen")
  topScreen = _getTopScreen()
  navController = getNavController()
  if topScreen = invalid
    if navController <> invalid and navController.numberOfViews > 0
      topScreen = navController.currentView
    else
      topScreen = m.top
    end if
  end if
  return topScreen
end function

' /**
'  * @member _getTopScreen
'  * @memberof module:BaseScreen
'  * @instance
'  * @description override point, for a screen to provide it's own means
'  * of looking up a screen at the top of it's stack
'  * @param {paramType} paramDescription
'  * @returns {returnType} returnDescription
'  */
function _getTopScreen()
  return invalid
end function

function getScreenForContent(content)
  return invalid
end function
