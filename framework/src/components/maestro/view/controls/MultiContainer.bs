import "pkg:/source/rLog/rLogMixin.bs"

function init()
  registerLogger("MultiContainer", true)
  m.layoutGroup = m.top.findNode("container_layoutGroup")
  m.animation = m.top.findNode("container_animation")
  m.interpolator = m.top.findNode("container_interpolator")
  m.previousY = 0
  m.top.clippingRect = [0, 0, 1920, 1080]
  m.top.observeField("index", "onIndexChange")
end function

function initialize(args)
  updateChildren()
end function

function updateChildren()
  children = []
  
  for each child in m.top.getChildren( - 1, 0)
    if child.id <> "container_layoutGroup" and child.id <> "container_animation"
      children.push(child)
    end if
  end for
  
  m.layoutGroup.appendChildren(children)
end function

function onIndexChange()
  logMethod("onIndexChange", m.top.index, "isAnimated", m.top.isAnimated)
  newY = getYOfIndex(m.top.index)
  logInfo("new Y is", newY)
  
  if m.top.isAnimated
    if m.animation.state = "running"
      m.animation.control = "pause"
    end if
    
    m.interpolator.keyValue = [[0, m.previousY], [0, newY]]
    
    if m.animation.control = "pause"
      m.animation.control = "start"
    else
      m.animation.control = "resume"
    end if
    
  else
    m.layoutGroup.translation = [0, newY]
  end if
  
  child = m.layoutGroup.getChild(m.top.index)
  
  if child <> invalid
    setFocus(child)
  end if
  
  m.previousY = newY
end function

function getYOfIndex(index)
  y = 0
  for i = 0 to index - 1
    child = m.layoutGroup.getChild(i)
    if child <> invalid
      if child.height <> invalid
        y += child.height
      else
        logWarn("child of MultiContainer with index", i, "id", child.id, "does not have height property")
      end if
    else
      logWarn("child of MultiContainer with index", i, "is invalid")
    end if
  end for
  
  return - y
end function